name: build_and_deploy_flask_docker_img

on:
  # push:
  #   branches:
  #     - dev
  #     - flask_build
    # paths:
    #   - 'src/**'
    
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
        SF_ACCOUNT: ${{ secrets.SF_ACCOUNT }}
        SF_USERNAME: ${{ secrets.SF_USERNAME }}
        SF_IMG_REPO: ${{ secrets.SF_IMG_REPO }}
        SF_PASSWORD: ${{ secrets.SF_PASSWORD }}
        SF_ROLE: ${{ secrets.SF_ROLE }}
        SF_WAREHOUSE: ${{ secrets.SF_WAREHOUSE }}
        SF_DATABASE: ${{ secrets.SF_DATABASE }}
        SNOWFLAKE_PASSWORD: ${{ secrets.SF_PASSWORD }}
        TARGET_DB_NAME: DKU_DEMO_DEV
        TARGET_SCHEMA_NAME: KAGGLE_DATASETS
        IMG_NAME: dataapi

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Snowflake Image Repository
      run: |
        docker login $SF_IMG_REPO --username $SF_USERNAME --password $SF_PASSWORD

    - name: Build the Docker image
      run: |
        docker build -t $SF_IMG_REPO/$IMG_NAME:latest .

    - name: Push the Docker image
      run: |
        docker push $SF_IMG_REPO/$IMG_NAME:latest

    - name: Use Python 3.8.x
      uses: actions/setup-python@v2.2.1
      with:
        python-version: 3.8.x

    - name: Create vars JSON
      id: create_vars_json
      run: |
        echo "::set-output name=vars_json::'{\"sf_account\":\"$SF_ACCOUNT\", \"sf_user\":\"$SF_USERNAME\", \"snowflake_password\":\"$SF_PASSWORD\", \"sf_warehouse\":\"$SF_WAREHOUSE\", \"db_name\":\"$TARGET_DB_NAME\", \"schema_name\":\"$TARGET_SCHEMA_NAME\"}'"

    - name: Bind latest flask API to service endpoint with schemachange
      run: |
        echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
        python --version
        echo "Step 1: Installing schemachange"
        pip install schemachange
        
        echo "Step 2: Running schemachange"
        schemachange -f $GITHUB_WORKSPACE/utility -a $SF_ACCOUNT -u $SF_USERNAME -r $SF_ROLE -w $SF_WAREHOUSE -d $SF_DATABASE -c $SF_DATABASE.SCHEMACHANGE.DEV_CHANGE_HISTORY --create-change-history-table --vars ${{ steps.create_vars_json.outputs.vars_json}}
      # --vars '{"db_name": "DKU_DEMO_DEV", "schema_name": "KAGGLE_DATASETS"}'
